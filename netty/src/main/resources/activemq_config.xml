<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:jms="http://www.springframework.org/schema/jms"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans    
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd    
     http://www.springframework.org/schema/context    
     http://www.springframework.org/schema/context/spring-context-3.0.xsd    
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd    
    http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-3.0.xsd">  
  
    <context:component-scan base-package="com.llh" />  
    <!-- 这里暴露内部统一使用的MQ地址 -->  
    <bean id="internalTargetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">  
        <property name="brokerURL" value="tcp://localhost:61616" />  
    </bean>  
    <bean id="internalConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory"  
        destroy-method="stop">  
        <property name="connectionFactory" ref="internalTargetConnectionFactory" />  
        <property name="maxConnections" value="20" />  
    </bean>  
    <!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->  
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">  
        <property name="connectionFactory" ref="internalConnectionFactory" />  
    </bean>  
  
    <!-- 推送给用户信息  创建一个Queue-->  
    <bean id="userServiceQueue" class="org.apache.activemq.command.ActiveMQQueue">  
        <constructor-arg>  
            <value>user.service.queue</value>  
        </constructor-arg>  
    </bean>  
    <!-- 推送给新闻信息   创建一个Queue-->  
    <bean id="newsServiceQueue" class="org.apache.activemq.command.ActiveMQQueue">  
        <constructor-arg>  
            <value>news.service.queue</value>  
        </constructor-arg>  
    </bean>  
    <!-- 推送给客户信息   创建一个Queue-->  
    <bean id="clientServiceQueue" class="org.apache.activemq.command.ActiveMQQueue">  
        <constructor-arg>  
            <value>client.service.queue</value>  
        </constructor-arg>  
    </bean>  
  
     <!-- 推送给用户信息 -->  
    <bean id="userPushListenerMQ" class="org.apache.activemq.command.ActiveMQQueue">  
        <constructor-arg>  
            <value>user.service.queue</value>  
        </constructor-arg>  
    </bean>  
    <!-- 推送给新闻信息 -->  
    <bean id="newsPushListenerMQ" class="org.apache.activemq.command.ActiveMQQueue">  
        <constructor-arg>  
            <value>news.service.queue</value>  
        </constructor-arg>  
    </bean>  
    <!-- 推送给客户信息 -->  
    <bean id="clientPushListenerMQ" class="org.apache.activemq.command.ActiveMQQueue">  
        <constructor-arg>  
            <value>client.service.queue</value>  
        </constructor-arg>  
    </bean>    
    <!-- 用户接受推送 -->  
    <bean id="userPushListenerConsumer"  
          class="org.springframework.jms.listener.DefaultMessageListenerContainer">  
        <property name="connectionFactory" ref="internalConnectionFactory" />  
        <property name="destination" ref="userPushListenerMQ" />  
        <property name="messageListener" ref="userPushListener" />  
    </bean> 
    <bean id="userPushListenerConsumer1"  
          class="org.springframework.jms.listener.DefaultMessageListenerContainer">  
        <property name="connectionFactory" ref="internalConnectionFactory" />  
        <property name="destination" ref="userPushListenerMQ" />  
        <property name="messageListener" ref="userPushListener" />  
    </bean> 
    <bean id="userPushListenerConsumer2"  
          class="com.llh.mq.UserPushListenerConsumer2">  
        <property name="connectionFactory" ref="internalConnectionFactory" />  
        <property name="destination" ref="userPushListenerMQ" />  
        <property name="messageListener" ref="userPushListener" />  
    </bean>
    
    <!-- 新闻接受推送 -->
    <bean id="newsPushListenerConsumer"
          class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="internalConnectionFactory" />
        <property name="destination" ref="newsPushListenerMQ" />
        <property name="messageListener" ref="newsPushListener" />
    </bean>
    
	<!-- 客户接受推送 -->
    <bean id="clientPushListenerConsumer"
          class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="internalConnectionFactory" />
        <property name="destination" ref="clientPushListenerMQ" />
        <property name="messageListener" ref="clientPushListener" />
    </bean>
    
    
    <!-- 配置JMS连接工厂 -->
    <bean id="providerConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="failover:(tcp://localhost:61616)" />
        <property name="useAsyncSend" value="true" />
        <property name="clientID" value="providerClienctConnect" />
    </bean>

    <!-- 定义消息Destination -->
    <bean id="topicDestination"  class="org.apache.activemq.command.ActiveMQTopic">
        <constructor-arg value="testSpringTopic"/>
    </bean>

    <!-- 消息发送者客户端 -->
    <bean id="providerJmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="providerConnectionFactory" />
        <property name="defaultDestination" ref="topicDestination" />
        <!-- 开启订阅模式 -->
        <property name="pubSubDomain" value="true"/>
        <property name="receiveTimeout" value="10000" />
        <!-- deliveryMode, priority, timeToLive 的开关要生效，必须配置为true，默认false-->
        <property name="explicitQosEnabled" value="true"/>
        <!-- 发送模式
             DeliveryMode.NON_PERSISTENT=1:非持久 ;
             DeliveryMode.PERSISTENT=2:持久
        -->
        <property name="deliveryMode" value="1"/>
    </bean>
    
    <!-- 配置JMS连接工厂 -->
    <bean id="consumerConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="failover:(tcp://localhost:61616)" />
        <property name="useAsyncSend" value="true" />
        <property name="clientID" value="consumerClienctConnect" />
    </bean>

    <!-- 定义消息Destination -->
    <bean id="topic1Destination"  class="org.apache.activemq.command.ActiveMQTopic">
        <constructor-arg value="testSpringTopic1"/>
    </bean>

    <!-- 配置消息消费监听者 -->
    <bean id="consumerMessageListener" class="com.llh.mq.ConsumerMessageListener" />

    <!-- 消息订阅客户端1 -->
    <bean id="consumerListenerClient1" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="consumerConnectionFactory" />
        <!-- 开启订阅模式 -->
        <property name="pubSubDomain" value="true"/>
        <property name="destination" ref="topic1Destination" />
        <property name="subscriptionDurable" value="true"/>
        <!---这里是设置接收客户端的ID，在持久化时，但这个客户端不在线时，消息就存在数据库里，直到被这个ID的客户端消费掉-->
        <property name="clientId" value="consumerClient1"/>
        <property name="messageListener" ref="consumerMessageListener" />
        <!-- 消息应答方式
             Session.AUTO_ACKNOWLEDGE  消息自动签收
             Session.CLIENT_ACKNOWLEDGE  客户端调用acknowledge方法手动签收
             Session.DUPS_OK_ACKNOWLEDGE 不必必须签收，消息可能会重复发送
        -->
        <property name="sessionAcknowledgeMode" value="1"/>
    </bean>

    <!-- 消息订阅客户端2 -->
    <bean id="consumerListenerClient2" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="consumerConnectionFactory" />
        <!-- 开启订阅模式 -->
        <property name="pubSubDomain" value="true"/>
        <property name="destination" ref="topic1Destination" />
        <property name="subscriptionDurable" value="true"/>
        <!---这里是设置接收客户端的ID，在持久化时，但这个客户端不在线时，消息就存在数据库里，直到被这个ID的客户端消费掉-->
        <property name="clientId" value="consumerClient2"/>
        <property name="messageListener" ref="consumerMessageListener" />
        <!-- 消息应答方式
             Session.AUTO_ACKNOWLEDGE  消息自动签收
             Session.CLIENT_ACKNOWLEDGE  客户端调用acknowledge方法手动签收
             Session.DUPS_OK_ACKNOWLEDGE 不必必须签收，消息可能会重复发送
        -->
        <property name="sessionAcknowledgeMode" value="1"/>
    </bean>
</beans>  